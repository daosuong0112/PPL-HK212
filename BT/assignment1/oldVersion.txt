/*expr: operand operator expr | operand | unary;
operand: INT | FLOAT | TRUE | FALSE | STR | ID | indexedarr | multiarr | call | subexp;
subexp: RB expr LB;
unary: (operand operatorunary | operatorunary operand);
operator: intop | floatop | boolop | stringop;
intop: ADD | MINUS | MULTI | DIV | PERCENT | COMPAR | NOTEQUAL | LARGER | NOT LARGER | SMALLER | NOTSMALLER;
floatop: ADD | MINUS | MULTI | DIV | LARGER | NOT LARGER | SMALLER | NOTSMALLER;
boolop: AND | OR | COMPARSTR | NOTEQUAL; 
stringop: COMPARSTR | CONCAT;
// còn index operators [,]
operatorunary: NEW | MINUS | NOT; // còn index operators [,]
*/

------------------
"""
Class main{
    Var a: Array[Array[String,3], 3] = Array (
Array("Volvo", "22", "18"),
Array("Saab", "5", "2"),
Array("Land Rover", "17", "15")
) ;
    getLength() {
        length = 10 + numOfShape / (a - b) || !a && New X() * e::t() % a.b(9) <= a;
        n = c() > d(a,b,c);
        If (a == b) {}
        Foreach (i In 1 .. 100 By 2) {
Out.printInt(i);
}
Foreach (x In 5 .. 2) {
Out.printInt(arr[x]);
}

    }
    
}
"""
------------------------------
"""
Class Rectangle: Shape {
 getArea() {
 Return Self.length * Self.width;
 If (a == b) {
     Var a: Array[Array[String,3], 3] = Array (
Array("Volvo", "22", "18"),
Array("Saab", "5", "2"),
Array("Land Rover", "17", "15")
) ;
Foreach (x In 5 .. 2) {
Out.printInt(arr[x]);
}
 }
 }
}
"""
---------------------------------
"""
    Class Shape {
Val $numOfShape: Int = 0;
Val immutableAttribute: Int = 0;
Var length, width: Int;
$getNumOfShape() {
Return $numOfShape;
}
}
Class Rectangle: Shape {
getArea() {
Return Self.length * Self.width;
If (a == b) {
     Var a: Array[Array[String,3], 3] = Array (
Array("Volvo", "22", "18"),
Array("Saab", "5", "2"),
Array("Land Rover", "17", "15")
) ;
$s = t::c(a,b);
 }
 Elseif (a < b) {
     a = 3;
 }
Elseif (a > b) {
    Var a : Float = 4;
}
Elseif (a == 2) {
    Foreach (i In 1 .. 100 By 2) {
Out.printInt(i);
}
Foreach (x In 5 .. 2) {
Out.printInt(arr[x]);
}

}
Else {
    If (a == b) {
     Var a: Array[Array[String,3], 3] = Array (
Array("Volvo", "22", "18"),
Array("Saab", "5", "2"),
Array("Land Rover", "17", "15")
) ;
 }
}
}
}
Class Program {
main() {
Out.printInt(Shape::$numOfShape);
}
}
"""