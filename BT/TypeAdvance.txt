1.
class StaticCheck(Visitor):
    # class Program: #decl:List[VarDecl],stmts:List[Assign]
    def visitProgram(self,ctx:Program,o):
        o = {}
        for decl in ctx.decl:
            id_name = self.visit(decl, o)
            o[id_name] = 0 # 0: no type
        for stmt in ctx.stmts:
            self.visit(stmt, o)

    # class VarDecl: #name:str
    def visitVarDecl(self,ctx:VarDecl, o):
        return ctx.name

    # class Assign: #lhs:Id,rhs:Exp
    def visitAssign(self,ctx:Assign,o):
        right_typ = self.visit(ctx.rhs, o)
        left_typ = self.visit(ctx.lhs, o)
        if type(right_typ) is str and o[right_typ] == 0:
            raise TypeCannotBeInferred(ctx)
        if o[left_typ] != 0 and o[left_typ] != right_typ:
            raise TypeMismatchInStatement(ctx)
        o[left_typ] = o[right_typ] if type(right_typ) is str else right_typ
        

    def type_infer(self, o, name_id, typ):
        if o[name_id] == 0:
            o[name_id] = typ
        return o[name_id]

    # class BinOp(Exp): #op:str,e1:Exp,e2:Exp #op is +,-,*,/,+.,-.,*.,/., &&,||, >, >., >b, =, =., =b
    def visitBinOp(self,ctx:BinOp,o):
        leftoperand_type = self.visit(ctx.e1, o)
        rightoperand_type = self.visit(ctx.e2, o)
        operator = ctx.op
        if operator in ['+', '-', '*', '/']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 1)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 1)
            if leftoperand_type != 1 or rightoperand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 1
        if operator in ['+.', '-.', '*.', '/.']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 2)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 2)
            if leftoperand_type != 2 or rightoperand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator in ['&&', '||', '>b', '=b']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 3)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 3)
            if leftoperand_type != 3 or rightoperand_type != 3:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator in ['>', '=']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 1)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 1)
            if leftoperand_type != 1 or rightoperand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator in ['>.', '=.']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 2)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 2)
            if leftoperand_type != 2 or rightoperand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 3
        
    # class UnOp(Exp): #op:str,e:Exp #op is -,-., !,i2f, floor
    def visitUnOp(self,ctx:UnOp,o):
        operand_type = self.visit(ctx.e, o)
        operator = ctx.op
        if operator == '-':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 1)
            if operand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 1
        if operator == '-.':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 2)
            if operand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator == '!':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 3)
            if operand_type != 3:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator == 'i2f':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 1)
            if operand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator == 'floor':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 2)
            if operand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 1

    # class IntLit(Exp): #val:int
    def visitIntLit(self,ctx:IntLit,o):
        return 1 # 1: int type

    # class FloatLit(Exp): #val:float
    def visitFloatLit(self,ctx,o):
        return 2 # 2: float type

    # class BoolLit(Exp): #val:bool
    def visitBoolLit(self,ctx,o):
        return 3 # 3: boolean type

    # class Id(Exp): #name:str
    def visitId(self,ctx,o): 
        id_name = ctx.name
        if id_name not in o:
            raise UndeclaredIdentifier(id_name)
        return id_name

2.
def merge(dict1, dict2):
    res = {**dict1, **dict2}
    return res
class StaticCheck(Visitor):
    # class Program: #decl:List[VarDecl],stmts:List[Stmt]
    def visitProgram(self,ctx:Program,o):
        o = {}
        for decl in ctx.decl:
            id_name = self.visit(decl, o)
            o[id_name] = 0 # 0: no type
        for stmt in ctx.stmts:
            self.visit(stmt, o)

    # class VarDecl: #name:str
    def visitVarDecl(self,ctx:VarDecl, o):
        return ctx.name
     
    # class Block(Stmt): #decl:List[VarDecl],stmts:List[Stmt]   
    def visitBlock(self,ctx:Block, o):
        o_inner = {}
        for decl in ctx.decl:
            id_name = self.visit(decl, o_inner)
            if id_name in o_inner:
                raise Redeclared(decl)
            o_inner[id_name] = 0 # 0: no type
        o_inner = merge(o, o_inner)
        for stmt in ctx.stmts:
            self.visit(stmt, o_inner)
        for item in o_inner:
            if item in o and o[item] == 0:
                o[item] = o_inner[item]

    # class Assign: #lhs:Id,rhs:Exp
    def visitAssign(self,ctx:Assign,o):
        right_typ = self.visit(ctx.rhs, o)
        left_typ = self.visit(ctx.lhs, o)
        if type(right_typ) is str:
            left = o[left_typ]
            right = o[right_typ]
            if right == 0 and left != 0:
                o[right_typ] = left
            elif right != 0 and left == 0:
                o[left_typ] = right
            elif left == 0 and right == 0:
                raise TypeCannotBeInferred(ctx)
            else:
                if left != right:
                    raise TypeMismatchInStatement(ctx)
        else:
            if o[left_typ] == 0:
                o[left_typ] = right_typ
            elif o[left_typ] != right_typ:
                raise TypeMismatchInStatement(ctx) 
        
    # additional function
    def type_infer(self, o, name_id, typ):
        if o[name_id] == 0:
            o[name_id] = typ
        return o[name_id]

    # class BinOp(Exp): #op:str,e1:Exp,e2:Exp #op is +,-,*,/,+.,-.,*.,/., &&,||, >, >., >b, =, =., =b
    def visitBinOp(self,ctx:BinOp,o):
        leftoperand_type = self.visit(ctx.e1, o)
        rightoperand_type = self.visit(ctx.e2, o)
        operator = ctx.op
        if operator in ['+', '-', '*', '/']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 1)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 1)
            if leftoperand_type != 1 or rightoperand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 1
        if operator in ['+.', '-.', '*.', '/.']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 2)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 2)
            if leftoperand_type != 2 or rightoperand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator in ['&&', '||', '>b', '=b']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 3)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 3)
            if leftoperand_type != 3 or rightoperand_type != 3:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator in ['>', '=']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 1)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 1)
            if leftoperand_type != 1 or rightoperand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator in ['>.', '=.']:
            if type(leftoperand_type) == str:
                leftoperand_type = self.type_infer(o, leftoperand_type, 2)
            if type(rightoperand_type) == str:
                rightoperand_type = self.type_infer(o, rightoperand_type, 2)
            if leftoperand_type != 2 or rightoperand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 3
        
    # class UnOp(Exp): #op:str,e:Exp #op is -,-., !,i2f, floor
    def visitUnOp(self,ctx:UnOp,o):
        operand_type = self.visit(ctx.e, o)
        operator = ctx.op
        if operator == '-':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 1)
            if operand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 1
        if operator == '-.':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 2)
            if operand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator == '!':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 3)
            if operand_type != 3:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator == 'i2f':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 1)
            if operand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator == 'floor':
            if type(operand_type) == str:
                operand_type = self.type_infer(o, operand_type, 2)
            if operand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 1

    # class IntLit(Exp): #val:int
    def visitIntLit(self,ctx:IntLit,o):
        return 1 # 1: int type

    # class FloatLit(Exp): #val:float
    def visitFloatLit(self,ctx,o):
        return 2 # 2: float type

    # class BoolLit(Exp): #val:bool
    def visitBoolLit(self,ctx,o):
        return 3 # 3: boolean type

    # class Id(Exp): #name:str
    def visitId(self,ctx,o): 
        id_name = ctx.name
        if id_name not in o:
            raise UndeclaredIdentifier(id_name)
        return id_name

3.
# additional function
def type_infer(o, name_id, typ):
    if o['vardecl'][name_id] == 0:
        o['vardecl'][name_id] = typ
    return o[name_id]
    
def merge(dict1, dict2):
    res = {**dict1, **dict2}
    return res
    
class StaticCheck(Visitor):
    # class Program: #decl:List[Decl],stmts:List[Stmt]
    def visitProgram(self,ctx:Program, o):
        o = {}
        o_var = {}
        o_func = {}
        for decl in ctx.decl:
            id_name, val = self.visit(decl, o)
            if id_name in o_var or id_name in o_func:
                raise Redeclared(decl)
            if val == 0:
                o_var[id_name] = val
            else:
                o_func[id_name] = val
        o['vardecl'] = o_var
        o['funcdecl'] = o_func
        for stmt in ctx.stmts:
            self.visit(stmt, o)

    # class VarDecl: #name:str
    def visitVarDecl(self,ctx:VarDecl, o):
        return ctx.name, 0 # 0: no type
        
    # class FuncDecl(Decl): #name:str,param:List[VarDecl],local:List[Decl],stmts:List[Stmt]
    def visitFuncDecl(self,ctx:FuncDecl,o):
        func_name = ctx.name
        local_o = {}
        vardecls = {}
        for decl in ctx.param:
            id_name, val = self.visit(decl, local_o)
            if id_name in vardecls:
                raise Redeclared(decl)
            vardecls[id_name] = val
        
        local_vardecls = {}
        funcdecls = {}
        for decl in ctx.local:
            id_name, val = self.visit(decl, local_o)
            if id_name in vardecls or id_name in local_vardecls or id_name in funcdecls:
                raise Redeclared(decl)
            if val == 0:
                local_vardecls[id_name] = val
            else:
                funcdecls[id_name] = val
                
        local_o['funcdecl'] = funcdecls
        local_o['vardecl'] = merge(vardecls, local_vardecls)
        
        for stmt in ctx.stmts:
            self.visit(stmt, local_o)
            
        for item in vardecls:
            if item in local_o['vardecl']:
                vardecls[item] = local_o['vardecl'][item]
                
        return func_name, vardecls

    # class Assign(Stmt): #lhs:Id,rhs:Exp
    def visitAssign(self,ctx:Assign, o):
        right_typ = self.visit(ctx.rhs, o)
        left_typ = self.visit(ctx.lhs, o)
        if type(right_typ) is str:
            left = o['vardecl'][left_typ]
            right = o['vardecl'][right_typ]
            if right == 0 and left != 0:
                o['vardecl'][right_typ] = left
            elif right != 0 and left == 0:
                o['vardecl'][left_typ] = right
            elif left == 0 and right == 0:
                raise TypeCannotBeInferred(ctx)
            else:
                if left != right:
                    raise TypeMismatchInStatement(ctx)
        else:
            if o['vardecl'][left_typ] == 0:
                o['vardecl'][left_typ] = right_typ
            elif o['vardecl'][left_typ] != right_typ:
                raise TypeMismatchInStatement(ctx)
        
    # class CallStmt(Stmt): #name:str,args:List[Exp]
    def visitCallStmt(self,ctx:CallStmt, o):
        func_name = ctx.name
        if func_name not in o['funcdecl']:
            raise UndeclaredIdentifier(func_name)
        args = list(map(lambda x: self.visit(x, o), ctx.args))
        func_args = o['funcdecl'][func_name]
        
        if len(func_args) != len(args):
            raise TypeMismatchInStatement(ctx)
        
        func_args_items = list(func_args.items())
        for idx in range(len(args)):
            if type(args[idx]) is not str:
                if func_args_items[idx][1] == 0:
                    func_args[func_args_items[idx][0]] = args[idx]
                elif func_args_items[idx][1] != args[idx]:
                    raise TypeMismatchInStatement(ctx)
            else:
                typ = o['vardecl'][args[idx]]
                if typ == 0:
                    if func_args_items[idx][1] == 0:
                        raise TypeCannotBeInferred(ctx)
                    else:
                        o['vardecl'][args[idx]] = func_args_items[idx][1]
                else:
                    if func_args_items[idx][1] == 0:
                        func_args[func_args_items[idx][0]] = typ
                    elif func_args_items[idx][1] != typ:
                        raise TypeMismatchInStatement(ctx)
                    

    # class BinOp(Exp): #op:str,e1:Exp,e2:Exp #op is +,-,*,/,+.,-.,*.,/., &&,||, >, >., >b, =, =., =b
    def visitBinOp(self,ctx:BinOp,o):
        leftoperand_type = self.visit(ctx.e1, o)
        rightoperand_type = self.visit(ctx.e2, o)
        operator = ctx.op
        if operator in ['+', '-', '*', '/']:
            if type(leftoperand_type) == str:
                leftoperand_type = type_infer(o, leftoperand_type, 1)
            if type(rightoperand_type) == str:
                rightoperand_type = type_infer(o, rightoperand_type, 1)
            if leftoperand_type != 1 or rightoperand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 1
        if operator in ['+.', '-.', '*.', '/.']:
            if type(leftoperand_type) == str:
                leftoperand_type = type_infer(o, leftoperand_type, 2)
            if type(rightoperand_type) == str:
                rightoperand_type = type_infer(o, rightoperand_type, 2)
            if leftoperand_type != 2 or rightoperand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator in ['&&', '||', '>b', '=b']:
            if type(leftoperand_type) == str:
                leftoperand_type = type_infer(o, leftoperand_type, 3)
            if type(rightoperand_type) == str:
                rightoperand_type = type_infer(o, rightoperand_type, 3)
            if leftoperand_type != 3 or rightoperand_type != 3:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator in ['>', '=']:
            if type(leftoperand_type) == str:
                leftoperand_type = type_infer(o, leftoperand_type, 1)
            if type(rightoperand_type) == str:
                rightoperand_type = type_infer(o, rightoperand_type, 1)
            if leftoperand_type != 1 or rightoperand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator in ['>.', '=.']:
            if type(leftoperand_type) == str:
                leftoperand_type = type_infer(o, leftoperand_type, 2)
            if type(rightoperand_type) == str:
                rightoperand_type = type_infer(o, rightoperand_type, 2)
            if leftoperand_type != 2 or rightoperand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 3
        
    # class UnOp(Exp): #op:str,e:Exp #op is -,-., !,i2f, floor
    def visitUnOp(self,ctx:UnOp,o):
        operand_type = self.visit(ctx.e, o)
        operator = ctx.op
        if operator == '-':
            if type(operand_type) == str:
                operand_type = type_infer(o, operand_type, 1)
            if operand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 1
        if operator == '-.':
            if type(operand_type) == str:
                operand_type = type_infer(o, operand_type, 2)
            if operand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator == '!':
            if type(operand_type) == str:
                operand_type = type_infer(o, operand_type, 3)
            if operand_type != 3:
                raise TypeMismatchInExpression(ctx)
            return 3
        if operator == 'i2f':
            if type(operand_type) == str:
                operand_type = type_infer(o, operand_type, 1)
            if operand_type != 1:
                raise TypeMismatchInExpression(ctx)
            return 2
        if operator == 'floor':
            if type(operand_type) == str:
                operand_type = type_infer(o, operand_type, 2)
            if operand_type != 2:
                raise TypeMismatchInExpression(ctx)
            return 1

    # class IntLit(Exp): #val:int
    def visitIntLit(self,ctx:IntLit,o):
        return 1 # 1: int type

    # class FloatLit(Exp): #val:float
    def visitFloatLit(self,ctx,o):
        return 2 # 2: float type

    # class BoolLit(Exp): #val:bool
    def visitBoolLit(self,ctx,o):
        return 3 # 3: boolean type

    # class Id(Exp): #name:str
    def visitId(self,ctx,o): 
        id_name = ctx.name
        if id_name not in o['vardecl']:
            raise UndeclaredIdentifier(id_name)
        return id_name